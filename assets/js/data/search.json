[
  
  {
    "title": "Ansible All Distro Docker Install",
    "url": "/posts/ansible-all-distro-docker-install/",
    "categories": "homelab, tutorial",
    "tags": "docker, ansible, playbooks",
    "date": "2024-12-06 08:50:49 -0300",
    





    
    "snippet": "As part of my SysAdmin journey, I’ve begun to play with Ansible.  For a while I’ve been using very simple playbooks to update my homelab’s VMs and LXC containers, but it’s time to take that a bit f...",
    "content": "As part of my SysAdmin journey, I’ve begun to play with Ansible.  For a while I’ve been using very simple playbooks to update my homelab’s VMs and LXC containers, but it’s time to take that a bit further.Desired OutcomeThe goal today is to start using playbooks in a modular way, thus allowing more flexibility and the reuse of playbooks across multiple projects.The idea here, is to have one main playbook that determines the OS on the host, namely Debian, Ubuntu, or a RedHat derivative OS (such as CentOS, Rocky, Fedora etc.)From there, a chain of appropriate task.yml files will begin updating the host OS, installing Docker, and finally copying over a test webpage and starting up an Nginx Docker container to serve the webpage.If we see the image below, we’re golden.Playbooks and task.yml filesFirst up we have the main playbook that triggers everything.main playbookos_specific_vm_setup.yml---- name: Update OS and install Docker  hosts: all  become: true  gather_facts: yes  tasks:    - name: Run update and install Docker for UBUNTU      include_tasks: ubuntu_vm_setup.yml      when: ansible_facts['distribution'] == 'Ubuntu'    - name: Run update and install Docker for DEBIAN      include_tasks: debian_vm_setup.yml      when: ansible_facts['distribution'] == 'Debian'    - name: Run update and install Docker for REDHAT      include_tasks: redhat_vm_setup.yml      when: ansible_facts['distribution'] in ['CentOS', 'RedHat', 'Rocky', 'AlmaLinux', 'Oracle', 'Scientific', 'Fedora'] #'Rocky'OS specific tasksdebian_vm_setup.yml# pre_tasks- name: Update cache if needed and update all installed apps  ansible.builtin.apt:    update_cache: true    cache_valid_time: 3600    name: \"*\"    state: latest# tasks- name: Install base apps  import_tasks: tasks/base_apps_debian.yml- name: Install Docker  import_tasks: tasks/docker_install_debian.yml # Debian host- name: Setup Nginx container  import_tasks: tasks/docker_nginx_setup.yml# post_tasks- name: Do apt cleanup and autoremove dangling files  ansible.builtin.apt:    autoclean: yes    autoremove: yesubuntu_vm_setup.yml# pre_tasks- name: Update cache if needed and update all installed apps  ansible.builtin.apt:    update_cache: true    cache_valid_time: 3600    name: \"*\"    state: latest# tasks- name: Install base apps  import_tasks: tasks/base_apps_debian.yml- name: Install Docker  import_tasks: tasks/docker_install_ubuntu.yml # Ubuntu host- name: Setup Nginx container  import_tasks: tasks/docker_nginx_setup.yml# post_tasks- name: Do apt cleanup and autoremove dangling files  ansible.builtin.apt:    autoclean: yes    autoremove: yesredhat_vm_setup.yml# pre_tasks- name: Update cache if needed and update all installed apps  ansible.builtin.dnf:    update_cache: true    name: \"*\"    state: latest# tasks- name: Install base apps  import_tasks: tasks/base_apps_redhat.yml- name: Install Docker  import_tasks: tasks/docker_install_redhat.yml # Redhat;Rock Linux host- name: Setup Nginx container  import_tasks: tasks/docker_nginx_setup.yml# post_tasks- name: Do apt cleanup and autoremove dangling files  ansible.builtin.dnf:    autoremove: yesOS specific base app install tasksbase_apps_debian.yml- name: Install commonly used OS apps  ansible.builtin.apt:     pkg:                  # install a list of packages    - net-tools    - curl    - zip    - unzip    - git    - fail2ban    - tree    - iperf3    state: latest    update_cache: truebase_apps_redhat.yml- name: Install EPEL repo  ansible.builtin.dnf:     pkg:    - epel-release        # necessary for certain dnf packages    state: latest    update_cache: true- name: Install commonly used OS apps  ansible.builtin.dnf:     pkg:                  # install a list of packages    - net-tools    - curl    - zip    - unzip    - git    - fail2ban    - tree    - iperf3    - python3-pip    state: latest    update_cache: trueOS specfic Docker install tasksdocker_install_debian.yml- name: Install Docker dependencies  ansible.builtin.apt:    pkg:    - apt-transport-https    - ca-certificates    - curl    - software-properties-common    - python3-pip    - virtualenv    - python3-setuptools    state: latest    update_cache: true- name: Add Docker GPG apt Key  apt_key:    url: https://download.docker.com/linux/ubuntu/gpg    state: present- name: Add Docker repo  ansible.builtin.apt_repository:    repo: deb [arch=amd64] https://download.docker.com/linux/debian bookworm stable   # update for correct Ubuntu version: jammy=22.04 LTS    state: present- name: Update apt and install docker-ce  ansible.builtin.apt:    pkg:    - docker-ce    - docker-ce-cli    - containerd.io    - docker-buildx-plugin    - docker-compose-plugin    state: latest    update_cache: true- name: Add non-root Docker user  ansible.builtin.shell:    cmd: usermod -aG docker testuserdocker_install_ubuntu.yml# Docker environment install for Ubuntu- name: Install Docker dependencies  ansible.builtin.apt:    pkg:    - apt-transport-https    - ca-certificates    - curl    - software-properties-common    - python3-pip    - virtualenv    - python3-setuptools    state: latest    update_cache: true- name: Add Docker GPG apt Key  apt_key:    url: https://download.docker.com/linux/ubuntu/gpg    state: present- name: Add Docker repo  ansible.builtin.apt_repository:    repo: deb https://download.docker.com/linux/ubuntu noble stable   # update for correct Ubuntu version: noble=24.04 LTS; jammy=22.04 LTS    state: present- name: Update apt and install docker-ce  ansible.builtin.apt:    pkg:    - docker-ce    - docker-ce-cli    - containerd.io    - docker-buildx-plugin    - docker-compose-plugin    state: latest    update_cache: true- name: Add non-root Docker user  ansible.builtin.shell:    cmd: usermod -aG docker testuserdocker_install_redhat.yml# Docker environment install for Redhat- name: Add signing key  ansible.builtin.rpm_key:    key: \"https://download.docker.com/linux/rhel/gpg\"    state: present- name: Add repo into repo.d list  ansible.builtin.yum_repository:    name: docker    description: docker repository    baseurl: \"https://download.docker.com/linux/rhel/9/x86_64/stable\"#    enable: true    gpgcheck: true    gpgkey: \"https://download.docker.com/linux/rhel/gpg\"- name: Install Docker  ansible.builtin.yum:    name:      - docker-ce      - docker-ce-cli      - containerd.io    state: present    update_cache: true- name: Install Python PIP dependencies  ansible.builtin.pip:    name:      - virtualenv      - requests      #- python3-wheels    state: present- name: Start and Enable Docker service  ansible.builtin.service:    name: \"docker\"    enabled: true    state: started- name: Add non-root Docker user  ansible.builtin.shell:    cmd: usermod -aG docker testuserNginx container setupdocker_nginx_setup.yml- name: Create local Nginx folder structure  file:    path: /home/testuser/nginx    state: directory- name: Copy over nginx folder  copy:    dest: /home/testuser/nginx/    src: nginx/- name: Start Nginx container  ansible.builtin.docker_container:    name: \"nginx\"    image: \"nginx:latest\"    detach: yes    ports: \"80:80\"    volumes: \"/home/testuser/nginx/site:/usr/share/nginx/html\"    restart: \"true\"ansible.cfgansible.cfg[testing:children]debianredhatubuntu[debian]192.168.10.156 # debian[debian:vars]ansible_ssh_user=testuser#ansible_ssh_password=my-fancy-passwordansible_become_password=my-fancy-passwordansible_ssh_private_key_file=/home/testuser/.ssh/testing[redhat]192.168.10.153 # rocky[redhat:vars]ansible_ssh_user=testuser#ansible_ssh_password=my-fancy-passwordansible_become_password=my-fancy-passwordansible_ssh_private_key_file=/home/testuser/.ssh/testing[ubuntu]192.168.10.152 # ubuntu[ubuntu:vars]ansible_ssh_user=testuser#ansible_ssh_password=my-fancy-passwordansible_become_password=my-fancy-passwordansible_ssh_private_key_file=/home/testuser/.ssh/testing## ENABLE SSH AGENT once before testing/application to avoid retyping password## eval \"$(ssh-agent -s)\"## ssh-add ~/.ssh/testinginventory.iniinventory.ini[defaults]inventory = inventory.inideprecation_warnings=False # to stop getting annoying warnings in purple text#host_key_checking=false     # comment out once SSH keys are in useansible_python_interpreter=/usr/bin/python3Technical DifficultiesHonestly, the issues were mostly around me needing to do some trial and error, and more and more trial and error.  Especially regarding the differences between Debian/Ubuntu and RedHat prerequisite apps.  Much the same with the various ansible.modules. It took a lot of research, but I got there.Lessons LearnedTime, and practice is needed. Documentation is your friend.  Slowly writing commands in myself versus copy and pasting everything is the best way to learn, as it helps my brain to understand how everything interconnects."
  },
  
  {
    "title": "How to Install Invoice Ninja V5 in Docker Compose",
    "url": "/posts/how-to-install-invoice-ninja-5-in-docker-compose/",
    "categories": "tutorial",
    "tags": "invoice ninja, selfhosted, docker",
    "date": "2021-04-07 03:00:00 -0300",
    





    
    "snippet": "Maybe you are like me and have a small business that requires an invoicing solution. You could pay the $10-15 to have a provider host the service for you (such as FreshBooks) or you could do it you...",
    "content": "Maybe you are like me and have a small business that requires an invoicing solution. You could pay the $10-15 to have a provider host the service for you (such as FreshBooks) or you could do it yourself with great Open Source software! Thankfully Invoice Ninja has a great app that they can host for you (for a fee) or, if you’re adventurous (or cheap… depending on your perspective) you could host it for yourself!Cavaet: Self-hosting Open Source software generally gives you access to ‘Premium’ tier features. Invoice Ninja is no different. However, if you should want their watermark removed from your invoices, you will need to pay them $30 a year for that priviledge. But honestly, that’s not unfair.Dev’s need to eat too!I have adapted this tutorial from the official tutorial on the Invoice Ninja Dockerfile Github page. Personally, I get confused by these tutorials that just assume you’re a rocket scientist, and so I failed at this about 25 times before I got it right. Although that was partially because I wasn’t reading this correctly.Finally, Invoice Ninja can be hosted on any x86 (Desktop PC or Server) or ARM (SBC such as a Raspberry Pi) device.This tutorial will focus on the x86 platform, and using Ubuntu Server. Obviously, you could use other distros, but you will need to adjust package managers etc as necessary to work with your chosen distro.If you are interested in installing this software in the traditional way, please check out my post on this here.PrerequisitesI’m going to assume that you already have the following:      A Linux based server up and running and fully updated.        Both Docker and Docker Compose installed, and the current user has been added to the docker group (meaning: we don’t need to use sudo before issuing docker commands).        Optional: A domain pointed at the server.  Also know that I will not be setting up SSL as I will be using a reverse-proxy on my server. I suggest you do the same if this is on a public facing server.Getting StartedInstall the apps we will need to download and extract the Invoice Ninja files.sudo apt install wget \\unzip \\git -yInstallationAt this point, where you place your Docker Compose files is really up to you. I place mine in my home folder. Each app/service gets it’s own folder. So let’s create that.mkdir invoiceninjacd invoiceninjaAnd now let’s clone the git repo that holds all the files necessary (including the docker-compose.yml file) we need to get this puppy working.git clone https://github.com/invoiceninja/dockerfiles.gitcd dockerfilesNow, we need to generate an APP_KEY that will later be used in an env file. The output of this command will create a key that starts with base64..., and you will need to make note of the entire output.If the command looks like it’s hanging, it’s because this will actually download the Invoice Ninja container in order to generate the key. The good news is that later when we spin it up, we’ll already have the container downloaded!docker run --rm -it invoiceninja/invoiceninja php artisan key:generate --showCritical step incoming!!!Now we need to apply folder permissions to this container. Failure to do so will cause an error in the app container saying that ‘app permissions are wrong’, thus breaking the whole app.chmod 755 docker/app/publicsudo chown -R 1500:1500 docker/appEditing configs - ENVLet’s start with the env file. At this point we should be in the dockerfiles folder.nano envAt this point, the below env is the stock version from the Invoice Ninja git. Note, that I have removed everything below the #4 env vars as this is no longer relevant.APP_URL=http://in.localhost:8003/APP_KEY=&lt;insert your generated key in here&gt;APP_DEBUG=trueMULTI_DB_ENABLED=falseDB_HOST1=dbDB_PORT1=3306DB_USERNAME1=ninjaDB_PASSWORD1=ninjaDB_DATABASE1=ninjaMYSQL_ROOT_PASSWORD=ninjaAdm1nPasswordMYSQL_USER=ninjaMYSQL_PASSWORD=ninjaMYSQL_DATABASE=ninja#this is a system variable please do not removeIS_DOCKER=truePHANTOMJS_PDF_GENERATION=falseIt goes without saying that you should ABSOLUTELY change the password variables, namely:      DB_PASSWORD1        MYSQL_ROOT_PASSWORD        MYSQL_PASSWORD  If you plan on generating PDFs of invoices, change the below variable from false to true. Although, personally I still can’t get the PDFs to work properly.PHANTOMJS_PDF_GENERATION=falseNext, the APP_URL variable needs to be updated to whatever your domain is.APP_URL=http://invoice.example.com...Next, we need to update the APP_KEY variable with the key we generated earlier.APP_KEY=base64...So, we should now have something like this.APP_URL=http://invoice.example.comAPP_KEY=base64abcdefghijklmn..APP_DEBUG=trueMULTI_DB_ENABLED=falseDB_HOST1=dbDB_PORT1=3306DB_USERNAME1=ninjaDB_PASSWORD1=ninjaPASSWORDthatNOoneCOULDguessDB_DATABASE1=ninjaMYSQL_ROOT_PASSWORD=ninjaAdm1nPasswordMYSQL_USER=ninjaMYSQL_PASSWORD=ninjaPASSWORDthatNOoneCOULDguessMYSQL_DATABASE=ninja#this is a system variable please do not removeIS_DOCKER=truePHANTOMJS_PDF_GENERATION=trueNow, save all the changes and exit.Editing configs - docker-compose.ymlThe changes here are more subjective and ‘to your use case’, rather than necessary, but I’ll point out a few that I think are worth your time.container_name:This variable currently doesn’t exist for each service, but I think its best to add these as custom values so when looking at your list of docker services, they are easier to identify. So add the below to each service.services:  server:    ...    container_name: invninja_server    ...  app:    ...    container_name: invninja_app    ...  db:    ...    container_name: invninja_db    ...ports:Currently the docker-compose.yml has port 80 exposed for the server. If this is fine for your purposes, then ignore this step. If you need to use a different port, then change according. For example:services:  server:    ...    ports:       - \"10000:80\"    ...Now, save all the changes and exit.Fire it up!!!Since these files are in the same folder, ensure that you are still in the ../invoiceninja/dockerfiles folder, and start the container.docker-compose up -dCool your jets!!IF you receive a SQLSTATE[42S02] exception complaint in your browser and a metric crap ton of tables, head back to the command line and run the following command.docker-compose exec app php artisan migrateI had this issue everytime I ran an install. This really should be in the documentation, but this lovely user mentioned it for us.Continuing setup!Wait about 30s to a 1 minute before opening the URL in the browser as it takes a while for everything to get ready. But once that’s done, open your browser of choice and type in the URL that you specified in the env file earlier.http://invoice.example.comNow just fill in all the relevant info (remember to pay attention to the db port) and also update the db host value to db. Essentially, this should be the same as whatever the database server is named in the docker-compose.yml file. In our case, as it should be for everyone unless you changed it, is db.That should be it!Post Install Setup &amp; Possible IssuesReverse-Proxy IssuesI personally use Nginx Proxy Manager (NPM) as my reverse-proxy of choice.However, when trying to login into my new Invoice Ninja install via the browser, all goes to hell when I enter my domain invoice.example.com. It’s as if all the CSS has been removed. This happens on the HTTP and HTTPS versions.However, if I entered the actual IP address and port number that the container is mapped to, for example, http://12.345.67.890:1000, well now all of a sudden everything is sunshine and roses.So, complete the setup this way, and then try login again via the domain name (with or without HTTPS), and all shall be good.Is your interface is having a whinge??APP_DEBUGOnce into my interface, and entering the company name currency of choice, I was met with a debug issue. Essentially, we now need to go back to the command line, open the env file and set the APP_DEBUG value to false, as seen below.APP_DEBUG=falseI orginally tried doing this before firing up the container, but the whole thing refused to work. This is probably why it was set to true in the first place.Now restart the container.Cronjob exclamationsYou will notice shortly after intial setup an exclamation in the bottom left corner of the screen. Ironically, after having done the above, and waiting a couple of minutes, just refresh the browser and that will go away.Very hi-tech solution.Final ThoughtsI’m still needing to get to grips with this software for myself, but by all accounts it’s a great! Hopefully all these quirks that I found (and hopefully solved for the long-term) will help you who is reading this, so you can avoid the 3 week slog I’ve gone through."
  },
  
  {
    "title": "How to install Invoice Ninja on Ubuntu Server 20.04",
    "url": "/posts/how-to-install-invoice-ninja-5-on-ubuntu-server/",
    "categories": "tutorial",
    "tags": "invoice ninja, selfhosted",
    "date": "2021-03-29 03:00:00 -0300",
    





    
    "snippet": "This is a tutorial I’ve written mostly for my own purposes that I have adapted from the orginal post from TechnicallyComputers. Kudos to him!Prerequisites      Fresh Ubuntu Server install on a VPS ...",
    "content": "This is a tutorial I’ve written mostly for my own purposes that I have adapted from the orginal post from TechnicallyComputers. Kudos to him!Prerequisites      Fresh Ubuntu Server install on a VPS / VM with sudo access.        Optional: A domain pointed at the server.  Install necessary (and extra) softwareFirst, update the system.sudo apt upgrade -y &amp;&amp; sudo apt dist-upgrade -y &amp;&amp; sudo apt clean &amp;&amp; sudo apt autoremove -y &amp;&amp; sudo rebootThen, install software we will use for the server. Note: Setup of fail2ban and UFW I’m going to leave to you. You can see my post on setting up Chamilo LMS where I cover that.sudo apt install -y ufw \\fail2ban \\unzip \\zip \\git \\tree \\openssh-server \\net-tools \\curl \\software-properties-commonAnd some specific software we will need for this setup?sudo apt install gcc g++ make php php-{fpm,bcmath,ctype,fileinfo,json,mbstring,pdo,tokenizer,xml,curl,zip,gmp,gd,mysqli} mariadb-server mariadb-client curl git nginx -yDownload and install PHP Composercurl -sS https://getcomposer.org/installer -o composer-setup.php &amp;&amp; \\sudo php composer-setup.php --install-dir=/usr/bin --filename=composerSetup Maria DB and the DatabaseOk, now fire up MariaDB and also make it start up automatically with the system on reboot. THe last command will start the securing of the DB root account.sudo systemctl start mariadbsudo systemctl enable mariadbsudo mysql_secure_installationFollow the below to know how to handle all the questions.Enter current password for root (enter for none): strong-ass-MariaDB-root-passwordChange the root password? [Y/n]: nRemove anonymous users? [Y/n]: yDisallow root login remotely? [Y/n]: yRemove test database and access to it? [Y/n]: yReload privilege tables now? [Y/n]: ysudo mysql -u root -pCREATE DATABASE ninjadb;CREATE USER 'ninja'@'localhost' IDENTIFIED BY 'ninjapassword';GRANT ALL PRIVILEGES ON ninjadb.* TO 'ninja'@'localhost' IDENTIFIED BY 'ninjapassword' WITH GRANT OPTION;FLUSH PRIVILEGES;EXIT;Make sure to update at least the password with your prefered choice, and the DB name and user should you wish to.Install Nginx (webserver)First, let’s remove the stock Nginx page to avoid confusion.sudo rm /etc/nginx/sites-enabled/defaultNow let’s add our own .conf file specifically for our projectsudo nano /etc/nginx/conf.d/invoiceninja.confAnd now copy in the below, and edit as per your needs, namely: port number (normally this is set to port 80, but mine is set to something random for my own purposes), and FQDN (domain name).server {        listen 10000 default_server;        listen [::]:10000 default_server;        root /var/www/html/invoiceninja/public;        # Add index.php to the list if you are using PHP        index index.php index.html index.htm;        client_max_body_size 50M;        gzip on;        gzip_types      application/javascript application/x-javascript text/javascript text/plain application/xml application/json;        gzip_proxied    no-cache no-store private expired auth;        gzip_min_length 1000;        server_name invoice.example.com;        location / {                # First attempt to serve request as file, then                # as directory, then fall back to displaying a 404.                try_files $uri $uri/ =404;        }        if (!-e $request_filename) {            rewrite ^(.+)$ /index.php?q= last;        }        # pass PHP scripts to FastCGI server        #        location ~ \\.php$ {                include snippets/fastcgi-php.conf;        #        #       # With php-fpm (or other unix sockets):                fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;        #       # With php-cgi (or other tcp sockets):        #       fastcgi_pass 127.0.0.1:9000;        }        # deny access to .htaccess files, if Apache's document root        # concurs with nginx's one        #        location ~ /\\.ht {                deny all;        }}The eagle eyed among you will see that it’s not complex, and that’s because I’ll have mine setup behind a reverse proxy. But if you need a complete .conf assumming that this is the sole purpose of the machine this is running on, see the config mentioned within the link at the beginning of the post.Then start and enable Nginx after killing Apache.sudo systemctl stop apache2sudo systemctl disable apache2sudo systemctl start nginxsudo systemctl enable nginxTest the nginx config to make sure all is well:sudo nginx -tGet Invoice Ninja filesVisit the invoiceninja github release page and get the latest -release version zip file.cd /var/www/htmlsudo mkdir invoiceninja &amp;&amp; cd invoiceninjasudo wget https://github.com/invoiceninja/invoiceninja/releases/download/v5.1.32-release/invoiceninja.zipsudo unzip invoiceninja.zipInstalling and configuring software and dependenciesFirst move to the webroot for InvoiceNinja if not done so already.cd /var/www/html/invoiceninjaThen run the compose. This is needed for InvoiceNinja to work.sudo php /usr/bin/composer install --no-devIf you’re short on memory, run this bad boy:sudo php -d memory_limit=-1 `which composer` install --no-devThis will generate a .env file with an encryption key. Wait while this runs.Then add that encryption key to the .env. Then run the auto config process. This must be repeated if files are moved or changed in the invoiceninja directory.sudo php artisan key:generatesudo php artisan optimizeLastly, set folder permissions.sudo chown -R www-data:www-data /var/www/html/invoiceninjasudo chmod -R g+s /var/www/html/invoiceninjaInvoiceNinja requires some regular maintenance to take place. Failing to do so will place a bright red exclamation logo in the bottom left of the InvoiceNinja interface. This all takes place in crontab -e. Note: until you reboot the system, the exclamation will remain.sudo -u www-data crontab -eInsert this:* * * * * php /var/www/html/invoiceninja/artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1Some folks have issues generating PDF’s. Should you have these issues, the below dependencies could fix that.sudo apt-get install -y gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wgetReboot.sudo rebootAnd finally, visit your IP/domain and complete the setup.ConclusionThat’s it! All should be working now."
  },
  
  {
    "title": "How to Install Chamilo on Ubuntu Server",
    "url": "/posts/how-to-install-chamilo-on-ubuntu-server/",
    "categories": "homelab, tutorial",
    "tags": "chamilo, selfhosted",
    "date": "2020-12-18 00:00:00 -0300",
    





    
    "snippet": "This is a tutorial I’ve written mostly for my own purposes that I have adapted from the orginal post from Vultr. Kudos to those guys.Prerequisites  Fresh Ubuntu Server install on a VPS with sudo ac...",
    "content": "This is a tutorial I’ve written mostly for my own purposes that I have adapted from the orginal post from Vultr. Kudos to those guys.Prerequisites  Fresh Ubuntu Server install on a VPS with sudo access.  A domain pointed at the server.Install necessary (and extra) softwareFirst, update the system.sudo apt upgrade -y &amp;&amp; sudo apt dist-upgrade -y &amp;&amp; sudo apt autoremove -y &amp;&amp; sudo apt clean -y &amp;&amp; sudo rebootThen, install software we will use for the server.sudo apt install -y ufw \\fail2ban \\unzip \\zip \\git \\tree \\openssh-server \\net-tools \\curl \\software-properties-commonUpdate UFW firewall rulessudo ufw allow in ssh &amp;&amp; \\sudo ufw allow in http &amp;&amp; \\sudo ufw allow in https &amp;&amp; \\sudo ufw enableInstall, setup and secure MariaDBTo install the latest version of MariaDB directly, you will need to add the MariaDB repos. Confirm the latest version here, and update the version number and Ubuntu version as needed.sudo apt install -y software-properties-common &amp;&amp; \\sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8 &amp;&amp; \\sudo add-apt-repository 'deb [arch=amd64,arm64,ppc64el] http://mirrors.accretive-networks.net/mariadb/repo/10.5/ubuntu focal main' &amp;&amp; \\sudo apt update &amp;&amp; \\sudo apt install -y mariadb-serverDuring the install, provide a strong password for MariaDB. If not requested, no sweat, we’ll secure it in the next block.Ok, now fire up MariaDB and also make it start up automatically with the system on reboot:sudo systemctl start mariadb.servicesudo systemctl enable mariadb.serviceNow, let’s secure MariaDB:sudo /usr/bin/mysql_secure_installationA prompt will come up, answer as below, but remember to provide a strong root password now if not done so previously.Enter current password for root (enter for none): strong-ass-MariaDB-root-passwordChange the root password? [Y/n]: nRemove anonymous users? [Y/n]: yDisallow root login remotely? [Y/n]: yRemove test database and access to it? [Y/n]: yReload privilege tables now? [Y/n]: yInstall Apachesudo apt install -y apache2Go to the server URL to confirm Apache is up and running.Remove the standard Apache welcome page.sudo mv /var/www/html/index.html /var/www/html/index.html.oldBackup the default .conf file and block Apache from exposing the web root directory:sudo cp /etc/apache2/apache2.conf /etc/apache2/apache2.conf.baksudo sed -i \"s/Options Indexes FollowSymLinks/Options FollowSymLinks/\" /etc/apache2/apache2.confEnable the Apache rewrite module, start the service and auto-startsudo a2enmod rewritesudo systemctl start apache2.servicesudo systemctl enable apache2.serviceInstall latest PHP PackagesIn order to run the latest PHP 7.x packages, we need to add the repo:sudo add-apt-repository -y ppa:ondrej/phpsudo apt updatesudo apt upgrade -ysudo apt autoremove -yInstall the latest 7.4 packages. Before doing so, confirm the latest version here, and if higher the 7.4, substitute that version wherever you see 7.4.sudo apt install -y php7.4 php7.4-opcache php7.4-cli php7.4-curl php7.4-common php7.4-gd php7.4-intl php7.4-mbstring php7.4-mysql libapache2-mod-php7.4 php7.4-soap php7.4-xml php7.4-xmlrpc php7.4-zip php7.4-ldap php-apcu-bcBackup and then edit the PHP config file pertaining to Apache:sudo cp /etc/php/7.4/apache2/php.ini /etc/php/7.4/apache2/php.ini.baksudo sed -i 's#;date.timezone =#date.timezone = America/Sao_Paulo#' /etc/php/7.4/apache2/php.iniRight, now let’s adjust the php.ini file to meet the necessities of Chamilo LMS:sudo nano /etc/php/7.4/apache2/php.iniFind these:session.cookie_httponly =upload_max_filesize = 2Mpost_max_size = 8MAnd update them to look like these:session.cookie_httponly = 1upload_max_filesize = 100Mpost_max_size = 100MInstall ChamiloSetup the Databasesudo mysql -u root -pCREATE DATABASE chamilo;CREATE USER 'chamilo'@'localhost' IDENTIFIED BY 'password';GRANT ALL PRIVILEGES ON chamilo.* TO 'chamilo'@'localhost' IDENTIFIED BY 'password' WITH GRANT OPTION;FLUSH PRIVILEGES;EXIT;Make sure to update at least the password with your prefered choice, and the DB name and user should you wish to.Get Chamilo filesLet’s now head to Chamilo’s GitHub page to confirm we have the latest version. Update the link and steps below as needed:cdwget https://github.com/chamilo/chamilo-lms/releases/download/v1.11.14/chamilo-1.11.14.tar.gzExtract all the files to the /opt directory:sudo tar -zxvf chamilo-1.11.14.tar.gz -C /optCreate a symbolic link between the unzip directory and the webserver root directory”sudo ln -s /opt/chamilo-lms-1.11.14 /var/www/html/chamiloModify the ownership of all Chamilo files to the www-data user and the www-data group:sudo chown -R www-data:www-data /opt/chamilo-lms-1.11.14Configure Apache virtual server for Chamilocat &lt;&lt;EOF | sudo tee /etc/apache2/sites-available/chamilo.conf&lt;VirtualHost *:80&gt;ServerAdmin admin@example.comDocumentRoot /var/www/html/chamiloServerName chamilo.example.comServerAlias example.com&lt;Directory /&gt;AllowOverride AllRequire all granted&lt;/Directory&gt;&lt;Directory /var/www/html/chamilo&gt;Options FollowSymLinksAllowOverride AllRequire all granted&lt;/Directory&gt;ErrorLog /var/log/apache2/chamilo.example.com-error_logCustomLog /var/log/apache2/chamilo.example.com-access_log common&lt;/VirtualHost&gt;EOFUpdate the ServerAdmin, ServerName, ServerAlias, ErrorLog and CustomLog as necessary.Then, create the symbolic links to the /etc/apache2/sites-enabled directory, while deleting the Apache default link.sudo rm /etc/apache2/sites-enabled/000-default.confsudo ln -s /etc/apache2/sites-available/chamilo.conf /etc/apache2/sites-enabled/Finally, restart Apache so all the changes are activated.sudo systemctl restart apache2.serviceComplete the install in the browserOpen up your browser and navigate to your server, for example: http://chamilo.iamamazing.com, and click on Install Chamilo. From here on, fill out the details as requested, but here is a quick guide for you.  Step 1 - Installation Language: Choose the language of choice and then click the Next button.  Step 2 – Requirements: Make sure that all mandatory requirements have been met, and then click the New installation button.  Step 3 – Licence: Read the licence if you dare, and the click the checkbox next to the I agree sentence, fill in all required fields, and then click the Next button.  Step 4 – MySQL database settings: Input the database credentials we setup earlier and then click the Check database connection button to verify them. Click the Next button to move on.  Step 5 – Config settings: Modify the pre-set administrator password, fill in the other fields accordingly, and then click the Next button.  Step 6 – Last check before install: Review all of the settings and hit the Install Chamilo button to start the web installation.  Step 7 – Installation process execution: When Chamilo is successfully installed, click the Go to your newly created portal. button to finish the web installation wizard.Post-Install Safety Measure: DO NOT SKIP THIS!!!In order to tighten security of the installation folders, we need to change their permissions:sudo chmod -R 0555 /var/www/html/chamilo/app/configsudo rm -rf /var/www/html/chamilo/main/installFail2BanSourced from: How to Secure Your Linux Server with fail2banHow to Secure Your Linux Server with fail2banFirstly, install fail2ban.sudo apt-get install fail2banConfiguring fail2banfail2ban creates ‘jails’ in .conf files. This standard config is removed each time fail2ban upgrades, so we’ll make a customized file.So, lets make a copy of the default file and then edit our own version.sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.localsudo nano /etc/fail2ban/jail.localScroll down to the [DEFAULT] and [sshd] sections, that come up from about line 90 onwards. It appears near the top too, but ignore that. Find the following lines and update as below. See the source link above for further details of each.[DEFAULT] section:ignoreip = 127.0.0.1/8 ::1bantime = 24hfindtime = 5mmaxretry = 3[sshd] section: ADD these 2 lines to the end of the [sshd] section.maxretry = 3enable = trueEnable fail2banEnable the service and auto-start.sudo systemctl enable fail2bansudo systemctl start fail2banCheck that fail2ban is working.sudo systemctl status fail2ban.serviceCheck fail2ban status. This should show the active jail.sudo fail2ban-client statusTo show the exact status of the jail we activated. It will show any IPs that are banned.sudo fail2ban-client status sshdTesting the jail: see source link above.Unbanning an IPAfter seeing the banned IP from above, use the command below, inserting the appropriate IP.sudo fail2ban-client set sshd unbanip 192.168.4.25Now it can try again.Let’s Encrypt CertificateThis part is adapted from a Digital Ocean tutorial.Certbot setupSSL certs are a must have so let’s hook them up.Firstly, install the certbot.sudo apt install -y certbot python3-certbot-apacheConfirm your ServerName and ServerAlias details in your chamilo.conf file as we will need these for the cert request.sudo nano /etc/apache2/sites-available/chamilo.confLet’s quickly recheck that our Apahce files are all good and then reload Apache incase we made changes.sudo apache2ctl configtestsudo systemctl reload apache2Allow HTTPS through the firewallConfirm the current status.sudo ufw statusIf HTTP and HTTPS aren’t allowed through, please refer back to the UFW setup above.Obtain SSL Certificatesudo certbot --apacheA script will start to configure SSL. You will be asked to give an email, and you must in order to receive notices of expiring certs.When asked, agree to Let’s Encrypt’s TOS, by pressing A.Certbot will then ask you which domains you want to get certs for. This is where having accurate ServerName and ServerAlias details is important.When asked whether you want to redirect traffic, chose option 2 for YES. This will force all conenctions over HTTPS.Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -1: No redirect - Make no further changes to the webserver configuration.2: Redirect - Make all requests redirect to secure HTTPS access. Choose this fornew sites, or if you're confident your site works on HTTPS. You can undo thischange by editing your web server's configuration.- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -Select the appropriate number [1-2] then [enter] (press 'c' to cancel): 2If you get the message below, you’re golden!- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -Congratulations! You have successfully enabled https://your_domain andhttps://www.your_domainYou should test your configuration at:https://www.ssllabs.com/ssltest/analyze.html?d=your_domainhttps://www.ssllabs.com/ssltest/analyze.html?d=www.your_domain- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at:   /etc/letsencrypt/live/your_domain/fullchain.pem   Your key file has been saved at:   /etc/letsencrypt/live/your_domain/privkey.pem   Your cert will expire on 2020-07-27. To obtain a new or tweaked   version of this certificate in the future, simply run certbot again   with the \"certonly\" option. To non-interactively renew *all* of   your certificates, run \"certbot renew\" - Your account credentials have been saved in your Certbot   configuration directory at /etc/letsencrypt. You should make a   secure backup of this folder now. This configuration directory will   also contain certificates and private keys obtained by Certbot so   making regular backups of this folder is ideal. - If you like Certbot, please consider supporting our work by:   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate   Donating to EFF:                    https://eff.org/donate-leYou can confirm your SSL cert and it’s grade over at SSL Labs Server Test.Verify Certbot Auto-RenewalOur certbot package will automatically auto-renew our certificate. To check the status of this service, let’s use:sudo systemctl status certbot.timerYour output should look like this.Output● certbot.timer - Run certbot twice daily     Loaded: loaded (/lib/systemd/system/certbot.timer; enabled; vendor preset: enabled)     Active: active (waiting) since Tue 2020-04-28 17:57:48 UTC; 17h ago    Trigger: Wed 2020-04-29 23:50:31 UTC; 12h left   Triggers: ● certbot.serviceApr 28 17:57:48 fine-turtle systemd[1]: Started Run certbot twice daily.And if you want to test the renewal process, run this.sudo certbot renew --dry-runConclusionThat’s it! All should be working now."
  }
  
]

