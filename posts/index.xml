<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on darryl gibbs</title>
        <link>https://dgibbs.me/posts/</link>
        <description>Recent content in Posts on darryl gibbs</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Wed, 07 Apr 2021 10:11:05 -0300</lastBuildDate>
        <atom:link href="https://dgibbs.me/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>How to Install Invoice Ninja V5 in Docker Compose</title>
            <link>https://dgibbs.me/posts/2021/04/how-to-install-invoice-ninja-v5-in-docker-compose/</link>
            <pubDate>Wed, 07 Apr 2021 10:11:05 -0300</pubDate>
            
            <guid>https://dgibbs.me/posts/2021/04/how-to-install-invoice-ninja-v5-in-docker-compose/</guid>
            <description>Maybe you are like me and have a small business that requires an invoicing solution. You could pay the $10-15 to have a provider host the service for you (such as FreshBooks) or you could do it yourself with great Open Source software! Thankfully Invoice Ninja has a great app that they can host for you (for a fee) or, if you&amp;rsquo;re adventurous (or cheap&amp;hellip; depending on your perspective) you could host it for yourself!</description>
            <content type="html"><![CDATA[<p>Maybe you are like me and have a small business that requires an invoicing solution.  You could pay the $10-15 to have a provider host the service for you (such as <a href="https://www.freshbooks.com/">FreshBooks</a>) or you could do it yourself with great Open Source software!  Thankfully <a href="https://www.invoiceninja.com/">Invoice Ninja</a> has a great app that they can host for you (for a fee) or, if you&rsquo;re adventurous (or cheap&hellip; depending on your perspective) you could host it for yourself!</p>
<p><strong>Cavaet:</strong> Self-hosting Open Source software generally gives you access to &lsquo;Premium&rsquo; tier features.  Invoice Ninja is no different.  However, if you should want their watermark removed from your invoices, you will need to pay them <a href="https://www.invoiceninja.com/faqs/does-the-self-host-version-include-all-proenterprise-advanced-features/">$30 a year for that priviledge</a>.  But honestly, that&rsquo;s not unfair.</p>
<p><strong>Dev&rsquo;s need to eat too!</strong></p>
<p>I have adapted this tutorial from the official tutorial on the <a href="https://github.com/invoiceninja/dockerfiles">Invoice Ninja Dockerfile Github page</a>.  Personally, I get confused by these tutorials that just assume you&rsquo;re a rocket scientist, and so I failed at this about 25 times before I got it right.  Although that was partially because I wasn&rsquo;t reading this correctly.</p>
<p>Finally, Invoice Ninja can be hosted on any x86 (Desktop PC or Server) or ARM (SBC such as a Raspberry Pi) device.</p>
<p>This tutorial will focus on the x86 platform, and using Ubuntu Server. Obviously, you could use other distros, but you will need to adjust package managers etc as necessary to work with your chosen distro.</p>
<p>If you are interested in installing this software in the traditional way, please check out my post on this <a href="https://dgibbs.me/posts/2021/03/how-to-install-invoiceninja-on-ubuntu-server/">here</a>.</p>
<h2 id="prerequisites">Prerequisites</h2>
<p>I&rsquo;m going to assume that you already have the following:</p>
<ul>
<li>
<p>A Linux based server up and running and fully updated.</p>
</li>
<li>
<p>Both <a href="https://docs.docker.com/engine/install/ubuntu/">Docker</a> and <a href="https://docs.docker.com/compose/install/">Docker Compose</a> installed, and the current user has been added to the <code>docker</code> group (meaning: we don&rsquo;t need to use <code>sudo</code> before issuing docker commands).</p>
</li>
<li>
<p>Optional: A domain pointed at the server.</p>
</li>
</ul>
<p>Also know that I will not be setting up SSL as I will be using a reverse-proxy on my server.  I suggest you do the same if this is on a public facing server.</p>
<h2 id="getting-started">Getting Started</h2>
<p>Install the apps we will need to download and extract the Invoice Ninja files.</p>
<pre><code class="language-she" data-lang="she">sudo apt install wget \
unzip \
git -y
</code></pre><h2 id="installation">Installation</h2>
<p>At this point, where you place your Docker Compose files is really up to you.  I place mine in my home folder.  Each app/service gets it&rsquo;s own folder. So let&rsquo;s create that.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">mkdir invoiceninja
cd invoiceninja
</code></pre></div><p>And now let&rsquo;s clone the git repo that holds all the files necessary (including the <code>docker-compose.yml</code> file) we need to get this puppy working.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git clone https://github.com/invoiceninja/dockerfiles.git
cd dockerfiles
</code></pre></div><p>Now, we need to generate an <code>APP_KEY</code> that will later be used in an <code>env</code> file.  The output of this command will create a key that starts with <code>base64...</code>, and you will need to make note of the <strong>entire output</strong>.</p>
<p>If the command looks like it&rsquo;s hanging, it&rsquo;s because this will actually download the Invoice Ninja container in order to generate the key. The good news is that later when we spin it up, we&rsquo;ll already have the container downloaded!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">docker run --rm -it invoiceninja/invoiceninja php artisan key:generate --show
</code></pre></div><p><!-- raw HTML omitted --><strong>Critical step incoming!!!</strong><!-- raw HTML omitted --></p>
<p>Now we need to apply <strong>folder permissions</strong> to this container.  Failure to do so will cause an error in the <code>app</code> container saying that &lsquo;app permissions are wrong&rsquo;, thus breaking the whole app.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">chmod <span style="color:#ae81ff">755</span> docker/app/public
sudo chown -R 1500:1500 docker/app
</code></pre></div><h2 id="editing-configs---env">Editing configs - ENV</h2>
<p>Let&rsquo;s start with the <code>env</code> file.  At this point we should be in the <code>dockerfiles</code> folder.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">nano env
</code></pre></div><p>At this point, the below <code>env</code> is the stock version from the Invoice Ninja <code>git</code>.  Note, that I have removed everything below the <code>#4 env vars</code> as this is no longer relevant.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">APP_URL<span style="color:#f92672">=</span>http://in.localhost:8003/
APP_KEY<span style="color:#f92672">=</span>&lt;insert your generated key in here&gt;
APP_DEBUG<span style="color:#f92672">=</span>true
MULTI_DB_ENABLED<span style="color:#f92672">=</span>false
DB_HOST1<span style="color:#f92672">=</span>db
DB_PORT1<span style="color:#f92672">=</span><span style="color:#ae81ff">3306</span>
DB_USERNAME1<span style="color:#f92672">=</span>ninja
DB_PASSWORD1<span style="color:#f92672">=</span>ninja
DB_DATABASE1<span style="color:#f92672">=</span>ninja
MYSQL_ROOT_PASSWORD<span style="color:#f92672">=</span>ninjaAdm1nPassword
MYSQL_USER<span style="color:#f92672">=</span>ninja
MYSQL_PASSWORD<span style="color:#f92672">=</span>ninja
MYSQL_DATABASE<span style="color:#f92672">=</span>ninja

<span style="color:#75715e">#this is a system variable please do not remove</span>
IS_DOCKER<span style="color:#f92672">=</span>true

PHANTOMJS_PDF_GENERATION<span style="color:#f92672">=</span>false
</code></pre></div><p>It goes without saying that you should <strong>ABSOLUTELY</strong> change the password variables, namely:</p>
<ul>
<li>
<p><code>DB_PASSWORD1</code></p>
</li>
<li>
<p><code>MYSQL_ROOT_PASSWORD</code></p>
</li>
<li>
<p><code>MYSQL_PASSWORD</code></p>
</li>
</ul>
<p>If you plan on generating PDFs of invoices, change the below variable from <code>false</code> to <code>true</code>. Although, personally I still can&rsquo;t get the PDFs to work properly.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">PHANTOMJS_PDF_GENERATION<span style="color:#f92672">=</span>false
</code></pre></div><p>Next, the <code>APP_URL</code> variable needs to be updated to whatever your domain is.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">APP_URL<span style="color:#f92672">=</span>http://invoice.example.com
...
</code></pre></div><p>Next, we need to update the <code>APP_KEY</code> variable with the key we generated earlier.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">APP_KEY<span style="color:#f92672">=</span>base64...
</code></pre></div><p>So, we should now have something like this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">APP_URL<span style="color:#f92672">=</span>http://invoice.example.com
APP_KEY<span style="color:#f92672">=</span>base64abcdefghijklmn..
APP_DEBUG<span style="color:#f92672">=</span>true
MULTI_DB_ENABLED<span style="color:#f92672">=</span>false
DB_HOST1<span style="color:#f92672">=</span>db
DB_PORT1<span style="color:#f92672">=</span><span style="color:#ae81ff">3306</span>
DB_USERNAME1<span style="color:#f92672">=</span>ninja
DB_PASSWORD1<span style="color:#f92672">=</span>ninjaPASSWORDthatNOoneCOULDguess
DB_DATABASE1<span style="color:#f92672">=</span>ninja
MYSQL_ROOT_PASSWORD<span style="color:#f92672">=</span>ninjaAdm1nPassword
MYSQL_USER<span style="color:#f92672">=</span>ninja
MYSQL_PASSWORD<span style="color:#f92672">=</span>ninjaPASSWORDthatNOoneCOULDguess
MYSQL_DATABASE<span style="color:#f92672">=</span>ninja

<span style="color:#75715e">#this is a system variable please do not remove</span>
IS_DOCKER<span style="color:#f92672">=</span>true

PHANTOMJS_PDF_GENERATION<span style="color:#f92672">=</span>true
</code></pre></div><p>Now, save all the changes and exit.</p>
<h2 id="editing-configs---docker-composeyml">Editing configs - docker-compose.yml</h2>
<p>The changes here are more subjective and &lsquo;to your use case&rsquo;, rather than necessary, but I&rsquo;ll point out a few that I think are worth your time.</p>
<h3 id="container_name">container_name:</h3>
<p>This variable currently doesn&rsquo;t exist for each service, but I think its best to add these as custom values so when looking at your list of docker services, they are easier to identify.  So add the below to each service.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">services:
    server:
        ...
        container_name: invninja_server
        ...


    app:
        ...
        container_name: invninja_app
        ...


    db:
        ...
        container_name: invninja_db
        ...
</code></pre></div><h3 id="ports">ports:</h3>
<p>Currently the <code>docker-compose.yml</code> has port 80 exposed for the <code>server</code>.  If this is fine for your purposes, then ignore this step.  If you need to use a different port, then change according.  For example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">services:
    server:
        ...
        ports: 
            - <span style="color:#e6db74">&#34;10000:80&#34;</span>
        ...
</code></pre></div><p>Now, save all the changes and exit.</p>
<h2 id="fire-it-up">Fire it up!!!</h2>
<p>Since these files are in the same folder, ensure that you are still in the <code>../invoiceninja/dockerfiles</code> folder, and start the container.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">docker-compose up -d
</code></pre></div><h4 id="cool-your-jets">Cool your jets!!</h4>
<p><strong>IF</strong> you receive a <code>SQLSTATE[42S02] exception</code> complaint in your browser and a metric crap ton of tables, head back to the command line and run the following command.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">docker-compose exec app php artisan migrate
</code></pre></div><p>I had this issue <strong>everytime</strong> I ran an install.  This really should be in the documentation, but this lovely user <a href="https://github.com/invoiceninja/dockerfiles/issues/235">mentioned</a> it for us.</p>
<h4 id="continuing-setup">Continuing setup!</h4>
<p>Wait about 30s to a 1 minute before opening the URL in the browser as it takes a while for everything to get ready.  But once that&rsquo;s done, open your browser of choice and type in the URL that you specified in the <code>env</code> file earlier.</p>
<pre><code>http://invoice.example.com
</code></pre><p>Now just fill in all the relevant info (remember to pay attention to the <code>db port</code>)  and also update the <code>db host</code> value to <code>db</code>.  Essentially, this should be the same as whatever the database server is named in the <code>docker-compose.yml</code> file.  In our case, as it should be for everyone unless you changed it, is <code>db</code>.</p>
<p>That should be it!</p>
<h2 id="post-install-setup--possible-issues">Post Install Setup &amp; Possible Issues</h2>
<h3 id="reverse-proxy-issues">Reverse-Proxy Issues</h3>
<p>I personally use <a href="https://nginxproxymanager.com/">Nginx Proxy Manager</a> (NPM) as my reverse-proxy of choice.</p>
<p>However, when trying to login into my new Invoice Ninja install via the browser, all goes to hell when I enter my domain <code>invoice.example.com</code>.  It&rsquo;s as if all the CSS has been removed.  This happens on the HTTP and HTTPS versions.</p>
<p>However, if I entered the actual IP address and port number that the container is mapped to, for example, <code>http://12.345.67.890:1000</code>, well now all of a sudden everything is sunshine and roses.</p>
<p>So, complete the setup this way, and then try login again via the domain name (with or without HTTPS), and all shall be good.</p>
<h3 id="is-your-interface-is-having-a-whinge">Is your interface is having a whinge??</h3>
<h4 id="app_debug">APP_DEBUG</h4>
<p>Once into my interface, and entering the company name currency of choice, I was met with a <code>debug</code> issue.  Essentially, we now need to go back to the command line, open the <code>env</code> file and set the <code>APP_DEBUG</code> value to <code>false</code>, as seen below.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">APP_DEBUG<span style="color:#f92672">=</span>false
</code></pre></div><p>I orginally tried doing this before firing up the container, but the whole thing refused to work. This is probably why it was set to <code>true</code> in the first place.</p>
<p>Now restart the container.</p>
<h4 id="cronjob-exclamations">Cronjob exclamations</h4>
<p>You will notice shortly after intial setup an exclamation in the bottom left corner of the screen.  Ironically, after having done the above, and waiting a couple of minutes, just refresh the browser and that will go away.</p>
<p>Very hi-tech solution.</p>
<h2 id="final-thoughts">Final Thoughts</h2>
<p>I&rsquo;m still needing to get to grips with this software for myself, but by all accounts it&rsquo;s a great!  Hopefully all these quirks that I found (and hopefully solved for the long-term) will help you who is reading this, so you can avoid the 3 week slog I&rsquo;ve gone through.</p>
]]></content>
        </item>
        
        <item>
            <title>How to install Invoice Ninja on Ubuntu Server 20.04</title>
            <link>https://dgibbs.me/posts/2021/03/how-to-install-invoice-ninja-on-ubuntu-server-20.04/</link>
            <pubDate>Mon, 29 Mar 2021 13:56:37 -0300</pubDate>
            
            <guid>https://dgibbs.me/posts/2021/03/how-to-install-invoice-ninja-on-ubuntu-server-20.04/</guid>
            <description>This is a tutorial I&amp;rsquo;ve written mostly for my own purposes that I have adapted from the orginal post from TechnicallyComputers. Kudos to him!
Prerequisites   Fresh Ubuntu Server install on a VPS / VM with sudo access.
  Optional: A domain pointed at the server.
  Install necessary (and extra) software First, update the system.
sudo apt upgrade -y &amp;amp;&amp;amp; sudo apt dist-upgrade -y &amp;amp;&amp;amp; sudo apt clean &amp;amp;&amp;amp; sudo apt autoremove -y &amp;amp;&amp;amp; sudo reboot Then, install software we will use for the server.</description>
            <content type="html"><![CDATA[<p>This is a tutorial I&rsquo;ve written mostly for my own purposes that I have adapted from the orginal post from <a href="https://forum.invoiceninja.com/t/install-invoice-ninja-v5-on-ubuntu-20-04/4588">TechnicallyComputers</a>. Kudos to him!</p>
<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li>
<p>Fresh Ubuntu Server install on a VPS / VM with sudo access.</p>
</li>
<li>
<p>Optional: A domain pointed at the server.</p>
</li>
</ul>
<h2 id="install-necessary-and-extra-software">Install necessary (and extra) software</h2>
<p>First, update the system.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt upgrade -y <span style="color:#f92672">&amp;&amp;</span> sudo apt dist-upgrade -y <span style="color:#f92672">&amp;&amp;</span> sudo apt clean <span style="color:#f92672">&amp;&amp;</span> sudo apt autoremove -y <span style="color:#f92672">&amp;&amp;</span> sudo reboot
</code></pre></div><p>Then, install software we will use for the server. Note: Setup of fail2ban and UFW I&rsquo;m going to leave to you.  You can see my post on setting up Chamilo LMS where I cover that.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt install -y ufw <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>fail2ban <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>unzip <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>zip <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>git <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>tree <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>openssh-server <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>net-tools <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>curl <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>software-properties-common
</code></pre></div><p>And some specific software we will need for this setup?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt install gcc g++ make php php-<span style="color:#f92672">{</span>fpm,bcmath,ctype,fileinfo,json,mbstring,pdo,tokenizer,xml,curl,zip,gmp,gd,mysqli<span style="color:#f92672">}</span> mariadb-server mariadb-client curl git nginx -y
</code></pre></div><p>Download and install PHP Composer</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">curl -sS https://getcomposer.org/installer -o composer-setup.php <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>sudo php composer-setup.php --install-dir<span style="color:#f92672">=</span>/usr/bin --filename<span style="color:#f92672">=</span>composer
</code></pre></div><h2 id="setup-maria-db-and-the-database">Setup Maria DB and the Database</h2>
<p>Ok, now fire up MariaDB and also make it start up automatically with the system on reboot.  THe last command will start the securing of the DB root account.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo systemctl start mariadb
sudo systemctl enable mariadb
sudo mysql_secure_installation
</code></pre></div><p>Follow the below to know how to handle all the questions.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">Enter current password <span style="color:#66d9ef">for</span> root <span style="color:#f92672">(</span>enter <span style="color:#66d9ef">for</span> none<span style="color:#f92672">)</span>: strong-ass-MariaDB-root-password
Change the root password? <span style="color:#f92672">[</span>Y/n<span style="color:#f92672">]</span>: n
Remove anonymous users? <span style="color:#f92672">[</span>Y/n<span style="color:#f92672">]</span>: y
Disallow root login remotely? <span style="color:#f92672">[</span>Y/n<span style="color:#f92672">]</span>: y
Remove test database and access to it? <span style="color:#f92672">[</span>Y/n<span style="color:#f92672">]</span>: y
Reload privilege tables now? <span style="color:#f92672">[</span>Y/n<span style="color:#f92672">]</span>: y
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo mysql -u root -p

CREATE DATABASE ninjadb;
CREATE USER <span style="color:#e6db74">&#39;ninja&#39;</span>@<span style="color:#e6db74">&#39;localhost&#39;</span> IDENTIFIED BY <span style="color:#e6db74">&#39;ninjapassword&#39;</span>;
GRANT ALL PRIVILEGES ON ninjadb.* TO <span style="color:#e6db74">&#39;ninja&#39;</span>@<span style="color:#e6db74">&#39;localhost&#39;</span> IDENTIFIED BY <span style="color:#e6db74">&#39;ninjapassword&#39;</span> WITH GRANT OPTION;
FLUSH PRIVILEGES;
EXIT;
</code></pre></div><p>Make sure to update at least the <strong>password</strong> with your prefered choice, and the DB name and user should you wish to.</p>
<h2 id="install-nginx-webserver">Install Nginx (webserver)</h2>
<p>First, let&rsquo;s remove the stock Nginx page to avoid confusion.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo rm /etc/nginx/sites-enabled/default
</code></pre></div><p>Now let&rsquo;s add our own <code>.conf</code> file specifically for our project</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo nano /etc/nginx/conf.d/invoiceninja.conf
</code></pre></div><p>And now copy in the below, and edit as per your needs, namely: <strong>port number</strong> (normally this is set to port 80, but mine is set to something random for my own purposes), and <strong>FQDN</strong> (domain name).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">server <span style="color:#f92672">{</span>
        listen <span style="color:#ae81ff">10000</span> default_server;
        listen <span style="color:#f92672">[</span>::<span style="color:#f92672">]</span>:10000 default_server;

        root /var/www/html/invoiceninja/public;

        <span style="color:#75715e"># Add index.php to the list if you are using PHP</span>
        index index.php index.html index.htm;
        client_max_body_size 50M;
        gzip on;
        gzip_types      application/javascript application/x-javascript text/javascript text/plain application/xml application/json;
        gzip_proxied    no-cache no-store private expired auth;
        gzip_min_length 1000;


        server_name invoice.example.com;

        location / <span style="color:#f92672">{</span>
                <span style="color:#75715e"># First attempt to serve request as file, then</span>
                <span style="color:#75715e"># as directory, then fall back to displaying a 404.</span>
                try_files $uri $uri/ <span style="color:#f92672">=</span>404;
        <span style="color:#f92672">}</span>


        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>!-e $request_filename<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            rewrite ^<span style="color:#f92672">(</span>.+<span style="color:#f92672">)</span>$ /index.php?q<span style="color:#f92672">=</span> last;
        <span style="color:#f92672">}</span>

        <span style="color:#75715e"># pass PHP scripts to FastCGI server</span>
        <span style="color:#75715e">#</span>
        location ~ <span style="color:#ae81ff">\.</span>php$ <span style="color:#f92672">{</span>
                include snippets/fastcgi-php.conf;
        <span style="color:#75715e">#</span>
        <span style="color:#75715e">#       # With php-fpm (or other unix sockets):</span>
                fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
        <span style="color:#75715e">#       # With php-cgi (or other tcp sockets):</span>
        <span style="color:#75715e">#       fastcgi_pass 127.0.0.1:9000;</span>
        <span style="color:#f92672">}</span>

        <span style="color:#75715e"># deny access to .htaccess files, if Apache&#39;s document root</span>
        <span style="color:#75715e"># concurs with nginx&#39;s one</span>
        <span style="color:#75715e">#</span>
        location ~ /<span style="color:#ae81ff">\.</span>ht <span style="color:#f92672">{</span>
                deny all;
        <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>The eagle eyed among you will see that it&rsquo;s not complex, and that&rsquo;s because I&rsquo;ll have mine setup behind a reverse proxy.  But if you need a complete <code>.conf</code> assumming that this is the sole purpose of the machine this is running on, see the config mentioned within the link at the beginning of the post.</p>
<p>Then start and enable Nginx after killing Apache.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo systemctl stop apache2
sudo systemctl disable apache2
sudo systemctl start nginx
sudo systemctl enable nginx
</code></pre></div><p>Test the nginx config to make sure all is well:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo nginx -t
</code></pre></div><h2 id="get-invoice-ninja-files">Get Invoice Ninja files</h2>
<p>Visit the <a href="https://github.com/invoiceninja/invoiceninja/releases">invoiceninja github release page</a> and get the latest <strong>-release</strong> version zip file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd /var/www/html
sudo mkdir invoiceninja <span style="color:#f92672">&amp;&amp;</span> cd invoiceninja
sudo wget https://github.com/invoiceninja/invoiceninja/releases/download/v5.1.32-release/invoiceninja.zip
sudo unzip invoiceninja.zip
</code></pre></div><h3 id="installing-and-configuring-software-and-dependencies">Installing and configuring software and dependencies</h3>
<p>First move to the webroot for InvoiceNinja if not done so already.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd /var/www/html/invoiceninja
</code></pre></div><p>Then run the compose.  This is needed for InvoiceNinja to work.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo php /usr/bin/composer install --no-dev
</code></pre></div><p>If you&rsquo;re short on memory, run this bad boy:    </p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo php -d memory_limit<span style="color:#f92672">=</span>-1 <span style="color:#e6db74">`</span>which composer<span style="color:#e6db74">`</span> install --no-dev
</code></pre></div><p>This will generate a <em>.env</em> file with an encryption key. Wait while this runs.</p>
<p>Then add that encryption key to the <em>.env</em>. Then run the auto config process.  This <strong>must</strong> be repeated if files are moved or changed in the invoiceninja directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo php artisan key:generate
sudo php artisan optimize
</code></pre></div><p>Lastly, set folder permissions.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo chown -R www-data:www-data /var/www/html/invoiceninja
sudo chmod -R g+s /var/www/html/invoiceninja
</code></pre></div><p>InvoiceNinja requires some regular maintenance to take place.  Failing to do so will place a bright red exclamation logo in the bottom left of the InvoiceNinja interface.  This all takes place in <code>crontab -e</code>. Note: until you <code>reboot</code> the system, the exclamation will remain.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo -u www-data crontab -e
</code></pre></div><p>Insert this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">* * * * * php /var/www/html/invoiceninja/artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;<span style="color:#ae81ff">1</span>
</code></pre></div><p>Some folks have issues generating PDF&rsquo;s.  Should you have these issues, the below dependencies could fix that.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt-get install gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
</code></pre></div><p>Reboot.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo reboot
</code></pre></div><p>And finally, visit your IP/domain and complete the setup.</p>
<h2 id="conclusion">Conclusion</h2>
<p>That&rsquo;s it! All should be working now.</p>
]]></content>
        </item>
        
        <item>
            <title>How to Install Chamilo on Ubuntu Server</title>
            <link>https://dgibbs.me/posts/2020/12/how-to-install-chamilo-on-ubuntu-server/</link>
            <pubDate>Fri, 18 Dec 2020 12:00:37 -0300</pubDate>
            
            <guid>https://dgibbs.me/posts/2020/12/how-to-install-chamilo-on-ubuntu-server/</guid>
            <description>This is a tutorial I&amp;rsquo;ve written mostly for my own purposes that I have adapted from the orginal post from Vultr. Kudos to those guys.
Prerequisites   Fresh Ubuntu Server install on a VPS with sudo access.
  A domain pointed at the server.
  Install necessary (and extra) software First, update the system.
sudo apt upgrade -y &amp;amp;&amp;amp; sudo apt dist-upgrade -y &amp;amp;&amp;amp; sudo apt autoremove -y &amp;amp;&amp;amp; sudo apt clean -y &amp;amp;&amp;amp; sudo reboot Then, install software we will use for the server.</description>
            <content type="html"><![CDATA[<p>This is a tutorial I&rsquo;ve written mostly for my own purposes that I have adapted from the orginal post from <strong><a href="https://www.vultr.com/docs/how-to-install-chamilo-1-11-8-on-ubuntu-18-04-lts">Vultr</a></strong>. Kudos to those guys.</p>
<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li>
<p>Fresh Ubuntu Server install on a VPS with sudo access.</p>
</li>
<li>
<p>A domain pointed at the server.</p>
</li>
</ul>
<h2 id="install-necessary-and-extra-software">Install necessary (and extra) software</h2>
<p>First, update the system.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt upgrade -y <span style="color:#f92672">&amp;&amp;</span> sudo apt dist-upgrade -y <span style="color:#f92672">&amp;&amp;</span> sudo apt autoremove -y <span style="color:#f92672">&amp;&amp;</span> sudo apt clean -y <span style="color:#f92672">&amp;&amp;</span> sudo reboot
</code></pre></div><p>Then, install software we will use for the server.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt install -y ufw <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>fail2ban <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>unzip <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>zip <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>git <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>tree <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>openssh-server <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>net-tools <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>curl <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>software-properties-common
</code></pre></div><h2 id="update-ufw-firewall-rules">Update UFW firewall rules</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo ufw allow in ssh <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>sudo ufw allow in http <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>sudo ufw allow in https <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>sudo ufw enable
</code></pre></div><h2 id="install-setup-and-secure-mariadb">Install, setup and secure MariaDB</h2>
<p>To install the latest version of MariaDB directly, you will need to add the MariaDB repos. Confirm the latest version <a href="https://mariadb.org/download/">here</a>, and update the version number and Ubuntu version as needed.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt install -y software-properties-common <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8 <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>sudo add-apt-repository <span style="color:#e6db74">&#39;deb [arch=amd64,arm64,ppc64el] http://mirrors.accretive-networks.net/mariadb/repo/10.5/ubuntu focal main&#39;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>sudo apt update <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>sudo apt install -y mariadb-server
</code></pre></div><p>During the install, provide a strong password for MariaDB. If not requested, no sweat, we&rsquo;ll secure it in the next block.</p>
<p>Ok, now fire up MariaDB and also make it start up automatically with the system on reboot:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo systemctl start mariadb.service
sudo systemctl enable mariadb.service
</code></pre></div><p>Now, let&rsquo;s secure MariaDB:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo /usr/bin/mysql_secure_installation
</code></pre></div><p>A prompt will come up, answer as below, but remember to provide a <strong>strong</strong> root password now if not done so previously.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">Enter current password <span style="color:#66d9ef">for</span> root <span style="color:#f92672">(</span>enter <span style="color:#66d9ef">for</span> none<span style="color:#f92672">)</span>: strong-ass-MariaDB-root-password
Change the root password? <span style="color:#f92672">[</span>Y/n<span style="color:#f92672">]</span>: n
Remove anonymous users? <span style="color:#f92672">[</span>Y/n<span style="color:#f92672">]</span>: y
Disallow root login remotely? <span style="color:#f92672">[</span>Y/n<span style="color:#f92672">]</span>: y
Remove test database and access to it? <span style="color:#f92672">[</span>Y/n<span style="color:#f92672">]</span>: y
Reload privilege tables now? <span style="color:#f92672">[</span>Y/n<span style="color:#f92672">]</span>: y
</code></pre></div><h2 id="install-apache">Install Apache</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt install -y apache2
</code></pre></div><p>Go to the server URL to confirm Apache is up and running.</p>
<p>Remove the standard Apache welcome page.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo mv /var/www/html/index.html /var/www/html/index.html.old
</code></pre></div><p>Backup the default .conf file and block Apache from exposing the web root directory:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo cp /etc/apache2/apache2.conf /etc/apache2/apache2.conf.bak
sudo sed -i <span style="color:#e6db74">&#34;s/Options Indexes FollowSymLinks/Options FollowSymLinks/&#34;</span> /etc/apache2/apache2.conf
</code></pre></div><p>Enable the Apache rewrite module, start the service and auto-start</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo a2enmod rewrite
sudo systemctl start apache2.service
sudo systemctl enable apache2.service
</code></pre></div><h2 id="install-latest-php-packages">Install latest PHP Packages</h2>
<p>In order to run the latest PHP 7.x packages, we need to add the repo:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo add-apt-repository -y ppa:ondrej/php
sudo apt update
sudo apt upgrade -y
sudo apt autoremove -y
</code></pre></div><p>Install the latest 7.4 packages. Before doing so, confirm the latest version <a href="https://www.php.net/downloads.php">here</a>, and if higher the 7.4, substitute that version wherever you see <strong>7.4</strong>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt install -y php7.4 php7.4-opcache php7.4-cli php7.4-curl php7.4-common php7.4-gd php7.4-intl php7.4-mbstring php7.4-mysql libapache2-mod-php7.4 php7.4-soap php7.4-xml php7.4-xmlrpc php7.4-zip php7.4-ldap php-apcu-bc
</code></pre></div><p>Backup and then edit the PHP config file pertaining to Apache:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo cp /etc/php/7.4/apache2/php.ini /etc/php/7.4/apache2/php.ini.bak
sudo sed -i <span style="color:#e6db74">&#39;s#;date.timezone =#date.timezone = America/Sao_Paulo#&#39;</span> /etc/php/7.4/apache2/php.ini
</code></pre></div><p>Right, now let&rsquo;s adjust the php.ini file to meet the necessities of Chamilo LMS:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo nano /etc/php/7.4/apache2/php.ini
</code></pre></div><p>Find these:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">session.cookie_httponly <span style="color:#f92672">=</span>
upload_max_filesize <span style="color:#f92672">=</span> 2M
post_max_size <span style="color:#f92672">=</span> 8M
</code></pre></div><p>And update them to look like these:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">session.cookie_httponly <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
upload_max_filesize <span style="color:#f92672">=</span> 100M
post_max_size <span style="color:#f92672">=</span> 100M
</code></pre></div><h2 id="install-chamilo">Install Chamilo</h2>
<h3 id="setup-the-database">Setup the Database</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo mysql -u root -p

CREATE DATABASE chamilo;
CREATE USER <span style="color:#e6db74">&#39;chamilo&#39;</span>@<span style="color:#e6db74">&#39;localhost&#39;</span> IDENTIFIED BY <span style="color:#e6db74">&#39;password&#39;</span>;
GRANT ALL PRIVILEGES ON chamilo.* TO <span style="color:#e6db74">&#39;chamilo&#39;</span>@<span style="color:#e6db74">&#39;localhost&#39;</span> IDENTIFIED BY <span style="color:#e6db74">&#39;password&#39;</span> WITH GRANT OPTION;
FLUSH PRIVILEGES;
EXIT;
</code></pre></div><p>Make sure to update at least the <strong>password</strong> with your prefered choice, and the DB name and user should you wish to.</p>
<h3 id="get-chamilo-files">Get Chamilo files</h3>
<p>Let&rsquo;s now head to <a href="https://github.com/chamilo/chamilo-lms/releases">Chamilo&rsquo;s GitHub page</a> to confirm we have the latest version. Update the link and steps below as needed:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cd
wget https://github.com/chamilo/chamilo-lms/releases/download/v1.11.14/chamilo-1.11.14.tar.gz
</code></pre></div><p>Extract all the files to the <em>/opt</em> directory:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo tar -zxvf chamilo-1.11.14.tar.gz -C /opt
</code></pre></div><p>Create a symbolic link between the unzip directory and the webserver root directory&quot;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo ln -s /opt/chamilo-lms-1.11.14 /var/www/html/chamilo
</code></pre></div><p>Modify the ownership of all Chamilo files to the <code>www-data</code> user and the <code>www-data</code> group:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo chown -R www-data:www-data /opt/chamilo-lms-1.11.14
</code></pre></div><h3 id="configure-apache-virtual-server-for-chamilo">Configure Apache virtual server for Chamilo</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">cat <span style="color:#e6db74">&lt;&lt;EOF | sudo tee /etc/apache2/sites-available/chamilo.conf
</span><span style="color:#e6db74">&lt;VirtualHost *:80&gt;
</span><span style="color:#e6db74">ServerAdmin admin@example.com
</span><span style="color:#e6db74">DocumentRoot /var/www/html/chamilo
</span><span style="color:#e6db74">ServerName chamilo.example.com
</span><span style="color:#e6db74">ServerAlias example.com
</span><span style="color:#e6db74">&lt;Directory /&gt;
</span><span style="color:#e6db74">AllowOverride All
</span><span style="color:#e6db74">Require all granted
</span><span style="color:#e6db74">&lt;/Directory&gt;
</span><span style="color:#e6db74">&lt;Directory /var/www/html/chamilo&gt;
</span><span style="color:#e6db74">Options FollowSymLinks
</span><span style="color:#e6db74">AllowOverride All
</span><span style="color:#e6db74">Require all granted
</span><span style="color:#e6db74">&lt;/Directory&gt;
</span><span style="color:#e6db74">ErrorLog /var/log/apache2/chamilo.example.com-error_log
</span><span style="color:#e6db74">CustomLog /var/log/apache2/chamilo.example.com-access_log common
</span><span style="color:#e6db74">&lt;/VirtualHost&gt;
</span><span style="color:#e6db74">EOF</span>
</code></pre></div><p>Update the <strong>ServerAdmin</strong>, <strong>ServerName</strong>, <strong>ServerAlias</strong>, <strong>ErrorLog</strong> and <strong>CustomLog</strong> as necessary.</p>
<p>Then, create the symbolic links to the <code>/etc/apache2/sites-enabled</code> directory, while deleting the Apache default link.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo rm /etc/apache2/sites-enabled/000-default.conf
sudo ln -s /etc/apache2/sites-available/chamilo.conf /etc/apache2/sites-enabled/
</code></pre></div><p>Finally, restart Apache so all the changes are activated.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo systemctl restart apache2.service
</code></pre></div><h3 id="complete-the-install-in-the-browser">Complete the install in the browser</h3>
<p>Open up your browser and navigate to your server, for example: <code>http://chamilo.iamamazing.com</code>, and click on <strong>Install Chamilo</strong>. From here on, fill out the details as requested, but here is a quick guide for you.</p>
<ul>
<li><code>Step 1 - Installation Language</code>: Choose the language of choice and then click the <code>Next</code> button.</li>
<li><code>Step 2 – Requirements</code>: Make sure that all mandatory requirements have been met, and then click the <code>New installation</code> button.</li>
<li><code>Step 3 – Licence</code>: Read the licence if you dare, and the click the checkbox next to the <code>I agree</code> sentence, fill in all required fields, and then click the <code>Next</code> button.</li>
<li><code>Step 4 – MySQL database settings</code>: Input the database credentials we setup earlier and then click the <code>Check database connection</code> button to verify them. Click the <code>Next</code> button to move on.</li>
<li><code>Step 5 – Config settings</code>: Modify the
pre-set administrator password, fill in the other fields accordingly, and then click the <code>Next</code> button.</li>
<li><code>Step 6 – Last check before install</code>: Review all of the settings and hit the <code>Install Chamilo</code> button to start the web installation.</li>
<li><code>Step 7 – Installation process execution</code>: When Chamilo is successfully installed, click the <code>Go to your newly created portal.</code> button to finish the web installation wizard.</li>
</ul>
<h3 id="post-install-safety-measure-do-not-skip-this">Post-Install Safety Measure: DO NOT SKIP THIS!!!</h3>
<p>In order to tighten security of the installation folders, we need to change their permissions:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo chmod -R <span style="color:#ae81ff">0555</span> /var/www/html/chamilo/app/config
sudo rm -rf /var/www/html/chamilo/main/install
</code></pre></div><h2 id="fail2ban">Fail2Ban</h2>
<p>Sourced from: <a href="https://www.howtogeek.com/675010/how-to-secure-your-linux-computer-with-fail2ban/">How to Secure Your Linux Server with fail2ban</a><a href="https://www.howtogeek.com/675010/how-to-secure-your-linux-computer-with-fail2ban/">How to Secure Your Linux Server with fail2ban</a></p>
<p>Firstly, install fail2ban.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt-get install fail2ban
</code></pre></div><h3 id="configuring-fail2ban">Configuring fail2ban</h3>
<p>fail2ban creates &lsquo;jails&rsquo; in .conf files. This standard config is removed each time fail2ban upgrades, so we&rsquo;ll make a customized file.</p>
<p>So, lets make a copy of the default file and then edit our own version.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
sudo nano /etc/fail2ban/jail.local
</code></pre></div><p>Scroll down to the <strong>[DEFAULT]</strong> and <strong>[sshd]</strong> sections, that come up from about line 90 onwards. It appears near the top too, but ignore that. Find the following lines and update as below. See the source link above for further details of each.</p>
<p>[DEFAULT] section:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">ignoreip <span style="color:#f92672">=</span> 127.0.0.1/8 ::1

bantime <span style="color:#f92672">=</span> 24h

findtime <span style="color:#f92672">=</span> 5m

maxretry <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</code></pre></div><p>[sshd] section: <strong>ADD</strong> these 2 lines to the end of the [sshd] section.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">maxretry <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
enable <span style="color:#f92672">=</span> true
</code></pre></div><h3 id="enable-fail2ban">Enable fail2ban</h3>
<p>Enable the service and auto-start.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo systemctl enable fail2ban
sudo systemctl start fail2ban
</code></pre></div><p>Check that fail2ban is working.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo systemctl status fail2ban.service
</code></pre></div><p>Check fail2ban status. This should show the active jail.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo fail2ban-client status
</code></pre></div><p>To show the exact status of the jail we activated. It will show any IPs that are banned.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo fail2ban-client status sshd
</code></pre></div><p>Testing the jail: see source link above.</p>
<h3 id="unbanning-an-ip">Unbanning an IP</h3>
<p>After seeing the banned IP from above, use the command below, inserting the appropriate IP.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo fail2ban-client set sshd unbanip 192.168.4.25
</code></pre></div><p>Now it can try again.</p>
<h2 id="lets-encrypt-certificate">Let&rsquo;s Encrypt Certificate</h2>
<p>This part is adapted from a [Digital Ocean tutorial](<a href="https://www.digitalocean.com/community/tutorials/how-to-secure-apache-with-let-s-encrypt-on-ubuntu-20-04">How To Secure Apache with Let's Encrypt on Ubuntu 20.04 | DigitalOcean</a>).</p>
<h3 id="certbot-setup">Certbot setup</h3>
<p>SSL certs are a <strong>must have</strong> so let&rsquo;s hook them up.</p>
<p>Firstly, install the certbot.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt install -y certbot python3-certbot-apache
</code></pre></div><p>Confirm your <code>ServerName</code> and <code>ServerAlias</code> details in your chamilo.conf file as we will need these for the cert request.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo nano /etc/apache2/sites-available/chamilo.conf
</code></pre></div><p>Let&rsquo;s quickly recheck that our Apahce files are all good and then reload Apache incase we made changes.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apache2ctl configtest
sudo systemctl reload apache2
</code></pre></div><h3 id="allow-https-through-the-firewall">Allow HTTPS through the firewall</h3>
<p>Confirm the current status.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo ufw status
</code></pre></div><p>If HTTP and HTTPS aren&rsquo;t allowed through, please refer back to the UFW setup above.</p>
<h3 id="obtain-ssl-certificate">Obtain SSL Certificate</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo certbot --apache
</code></pre></div><p>A script will start to configure SSL.  You will be asked to give an email, and you must in order to receive notices of expiring certs.</p>
<p>When asked, agree to Let&rsquo;s Encrypt&rsquo;s TOS, by pressing <strong>A</strong>.</p>
<p>Certbot will then ask you which domains you want to get certs for.  This is where having accurate ServerName and ServerAlias details is important.</p>
<p>When asked whether you want to redirect traffic, chose option <code>2</code> for YES.  This will force all conenctions over HTTPS.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: No redirect - Make no further changes to the webserver configuration.
2: Redirect - Make all requests redirect to secure HTTPS access. Choose this <span style="color:#66d9ef">for</span>
new sites, or <span style="color:#66d9ef">if</span> you<span style="color:#e6db74">&#39;re confident your site works on HTTPS. You can undo this
</span><span style="color:#e6db74">change by editing your web server&#39;</span>s configuration.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate number <span style="color:#f92672">[</span>1-2<span style="color:#f92672">]</span> <span style="color:#66d9ef">then</span> <span style="color:#f92672">[</span>enter<span style="color:#f92672">]</span> <span style="color:#f92672">(</span>press <span style="color:#e6db74">&#39;c&#39;</span> to cancel<span style="color:#f92672">)</span>: <span style="color:#ae81ff">2</span>
</code></pre></div><p>If you get the message below, you&rsquo;re golden!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Congratulations! You have successfully enabled https://your_domain and
https://www.your_domain

You should test your configuration at:
https://www.ssllabs.com/ssltest/analyze.html?d<span style="color:#f92672">=</span>your_domain
https://www.ssllabs.com/ssltest/analyze.html?d<span style="color:#f92672">=</span>www.your_domain
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/your_domain/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/your_domain/privkey.pem
   Your cert will expire on 2020-07-27. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot again
   with the <span style="color:#e6db74">&#34;certonly&#34;</span> option. To non-interactively renew *all* of
   your certificates, run <span style="color:#e6db74">&#34;certbot renew&#34;</span>
 - Your account credentials have been saved in your Certbot
   configuration directory at /etc/letsencrypt. You should make a
   secure backup of this folder now. This configuration directory will
   also contain certificates and private keys obtained by Certbot so
   making regular backups of this folder is ideal.
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let<span style="color:#960050;background-color:#1e0010">&#39;</span>s Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le
</code></pre></div><p>You can confirm your SSL cert and it&rsquo;s grade over at [SSL Labs Server Test](<a href="https://www.ssllabs.com/ssltest/">SSL Server Test (Powered by Qualys SSL Labs)</a>).</p>
<h3 id="verify-certbot-auto-renewal">Verify Certbot Auto-Renewal</h3>
<p>Our certbot package will automatically auto-renew our certificate.  To check the status of this service, let&rsquo;s use:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo systemctl status certbot.timer
</code></pre></div><p>Your output should look like this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">Output
● certbot.timer - Run certbot twice daily
     Loaded: loaded <span style="color:#f92672">(</span>/lib/systemd/system/certbot.timer; enabled; vendor preset: enabled<span style="color:#f92672">)</span>
     Active: active <span style="color:#f92672">(</span>waiting<span style="color:#f92672">)</span> since Tue 2020-04-28 17:57:48 UTC; 17h ago
    Trigger: Wed 2020-04-29 23:50:31 UTC; 12h left
   Triggers: ● certbot.service

Apr <span style="color:#ae81ff">28</span> 17:57:48 fine-turtle systemd<span style="color:#f92672">[</span>1<span style="color:#f92672">]</span>: Started Run certbot twice daily.
</code></pre></div><p>And if you want to test the renewal process, run this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo certbot renew --dry-run
</code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>That&rsquo;s it! All should be working now.</p>
]]></content>
        </item>
        
        <item>
            <title>Seb Vettel deserves better</title>
            <link>https://dgibbs.me/posts/2020/08/seb-vettel-deserves-better/</link>
            <pubDate>Sat, 22 Aug 2020 06:46:08 -0300</pubDate>
            
            <guid>https://dgibbs.me/posts/2020/08/seb-vettel-deserves-better/</guid>
            <description>I&amp;rsquo;ve always enjoyed watching cars, or any reasonable vehicle, go around in circles.
Motorsport is a career I wish I could have entered, but never had the opportunity, finances or even remotely an ounce of the required skill and bravery.
So, I&amp;rsquo;ve had to settle for watching it on TV and playing video games. Lately, those games have evolved into simulator racing titles, which are both enjoyable and further evidence of my uselessness.</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve always enjoyed watching cars, or any reasonable vehicle, go around in circles.</p>
<p>Motorsport is a career I wish I could have entered, but never had the opportunity, finances or even remotely an ounce of the required skill and bravery.</p>
<p>So, I&rsquo;ve had to settle for watching it on TV and playing video games.  Lately, those games have evolved into simulator racing titles, which are both enjoyable and further evidence of my uselessness.</p>
<p>Anyway, after spending some years really following F1 (about 8 years in a &lsquo;hardcore&rsquo; capacity), I feel I&rsquo;m something of a couch expert..ish.  And since this is my blog, I will spew my drivel.</p>
<h2 id="the-history">The history</h2>
<p>Seb Vettel is one of those drivers that I would call a &lsquo;typical multiple World Driver&rsquo;s Championship (WDC) winner&rsquo;.</p>
<p>By that I mean, somehow who has rightly earned themselves acclaim, but now believes that the systems of F1 work for their benefit alone.  If things do not go their way, all must bow and scrape to achieve what THEY want, because they feel entitled to it.</p>
<p>You can add Lewis Hamilton to that list, although he adds spades of hollow humility to it. At least in my opinion.</p>
<p>Seb, back in his heyday at RBR (Red Bull Racing) cleaned up.  He really was that good.  But as the modern era of F1 has proven, you can be a fantastic driver, but the lead team whose car is just objectively better than all others will streak ahead almost regardless of the driver.</p>
<p><em><strong>cough</strong></em> Mercedes <em><strong>cough</strong></em></p>
<p>Seb eventually moved to Ferrari as every driver bar none has dreamed to do.  The famed team with more toxicity than Chernobyl, but in a shiny red car.</p>
<h2 id="scuderia-arrogant-tools">Scuderia Arrogant Tools</h2>
<p>It&rsquo;s no secret that Ferrari has performed poorly in recent years for all manner of reasons we won&rsquo;t discuss here. However, their recent treatment of Seb is beyond disrespectful.</p>
<p>I&rsquo;m one of those people who believe that despite one&rsquo;s previous accolades, you still need to earn respect on a daily basis.</p>
<p><strong>Just be a decent human.</strong>  That&rsquo;s it.</p>
<p>In 2019, Ferrari started with Charles LeClerc.  The ridiculously good Monégasque is deserving of that seat. As always, Ferrari plays favourites and this led Seb to be the new #2.</p>
<p>Now Ferrari&rsquo;s internal politics aside, and all their internal issues of 2019, Seb still did not deserve to be fired in the way he was.</p>
<p>Massively paraphrasing, he received a <strong>phone call</strong> from team boss Mattia Binotto saying:</p>
<blockquote>
<p>Hey Seb.  Listen, we&rsquo;re cutting you at the end of 2020 and this is not open for discussion.  See you at the next race.</p>
</blockquote>
<p>Now that is some rubbish right there.</p>
<p>Fast forward some months, and we&rsquo;re 6 races into the contracted 2020 season.  Seb is running in races where his team fails to provide him with any kind of race strategy or even the courtesy of regular communication while in the car.</p>
<p>In the Spanish GP, he was doing maths on behalf of his team at 300+ kph because they couldn&rsquo;t be arsed to do it themselves, even after his teammate retired.  Imagine hating your driver so much that you are (seemingly) prepared to let your own team fail just to save face.</p>
<p>Very Ferrari.</p>
<p>Seb himself is clearly off his game, this much is clear.  But when your team is clearly putting no effort into your car, not preparing a strategy, and treating you with less respect than the gum under your shoes, you have really hit rock bottom and not much more can be expected.</p>
<h2 id="seb-is-still-respected-by-those-that-matter">Seb is still respected by those that matter</h2>
<p>Seb did show his class in Spain however. Managing to do half a race of horrible soft tyres and still ending in the points.  A truly super-human effort.</p>
<p>While I disliked Seb&rsquo;s attitude, especially when he was on top, he is clearly one of the best.  His achievements have proven this.  The <strong>countless</strong> of &lsquo;good-guy Seb&rsquo; videos on YouTube have proven quite convincingly that even today, with all his status, he absolutely thinks of everyone equally and respectfully.</p>
<p>A <a href="https://twitter.com/F1/status/1284823057492844545?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1284823057492844545%7Ctwgr%5E&amp;ref_url=https%3A%2F%2Fwww.essentiallysports.com%2Ff1-news-watch-sebastian-vettel-shows-his-class-yet-again-before-the-hungarian-grand-prix%2F">video</a> of him being interviewed pre-race in the rain by Sky Sports where he politely scolded Johnny Herbert for allowing his Sound Engineer to be rained on whilst he was under an umbrella comes to mind.</p>
<p>I hope that no other driver will need to undergo this kind of treatment (especially his new replacement Carlos Sainz, who I really like) and that his experience will serve as both a warning to drivers and teams alike.</p>
<p>There are many rumours linking Seb to the new Aston Martin Works team (or revised Racing Point depending on your views) for 2021.  Personally, I hope he goes there and drives circles around everyone like the machine that he is.</p>
<p>Especially those buggers in the red car.</p>
]]></content>
        </item>
        
        <item>
            <title>Hugo: Getting Started</title>
            <link>https://dgibbs.me/posts/2020/08/hugo-getting-started/</link>
            <pubDate>Mon, 10 Aug 2020 20:24:08 -0300</pubDate>
            
            <guid>https://dgibbs.me/posts/2020/08/hugo-getting-started/</guid>
            <description>Mike Dane rules.</description>
            <content type="html"><![CDATA[<p>Mike Dane rules.</p>
]]></content>
        </item>
        
    </channel>
</rss>
